
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Feature` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Feature
 * 
 */
export type FeatureModel = runtime.Types.Result.DefaultSelection<Prisma.$FeaturePayload>

export type AggregateFeature = {
  _count: FeatureCountAggregateOutputType | null
  _avg: FeatureAvgAggregateOutputType | null
  _sum: FeatureSumAggregateOutputType | null
  _min: FeatureMinAggregateOutputType | null
  _max: FeatureMaxAggregateOutputType | null
}

export type FeatureAvgAggregateOutputType = {
  id: number | null
  price: number | null
  purchaseId: number | null
}

export type FeatureSumAggregateOutputType = {
  id: number | null
  price: number | null
  purchaseId: number | null
}

export type FeatureMinAggregateOutputType = {
  id: number | null
  name: string | null
  price: number | null
  imageUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
  purchaseId: number | null
}

export type FeatureMaxAggregateOutputType = {
  id: number | null
  name: string | null
  price: number | null
  imageUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
  purchaseId: number | null
}

export type FeatureCountAggregateOutputType = {
  id: number
  name: number
  price: number
  imageUrl: number
  createdAt: number
  updatedAt: number
  purchaseId: number
  _all: number
}


export type FeatureAvgAggregateInputType = {
  id?: true
  price?: true
  purchaseId?: true
}

export type FeatureSumAggregateInputType = {
  id?: true
  price?: true
  purchaseId?: true
}

export type FeatureMinAggregateInputType = {
  id?: true
  name?: true
  price?: true
  imageUrl?: true
  createdAt?: true
  updatedAt?: true
  purchaseId?: true
}

export type FeatureMaxAggregateInputType = {
  id?: true
  name?: true
  price?: true
  imageUrl?: true
  createdAt?: true
  updatedAt?: true
  purchaseId?: true
}

export type FeatureCountAggregateInputType = {
  id?: true
  name?: true
  price?: true
  imageUrl?: true
  createdAt?: true
  updatedAt?: true
  purchaseId?: true
  _all?: true
}

export type FeatureAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Feature to aggregate.
   */
  where?: Prisma.FeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Features to fetch.
   */
  orderBy?: Prisma.FeatureOrderByWithRelationInput | Prisma.FeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Features from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Features.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Features
  **/
  _count?: true | FeatureCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FeatureAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FeatureSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FeatureMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FeatureMaxAggregateInputType
}

export type GetFeatureAggregateType<T extends FeatureAggregateArgs> = {
      [P in keyof T & keyof AggregateFeature]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeature[P]>
    : Prisma.GetScalarType<T[P], AggregateFeature[P]>
}




export type FeatureGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeatureWhereInput
  orderBy?: Prisma.FeatureOrderByWithAggregationInput | Prisma.FeatureOrderByWithAggregationInput[]
  by: Prisma.FeatureScalarFieldEnum[] | Prisma.FeatureScalarFieldEnum
  having?: Prisma.FeatureScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeatureCountAggregateInputType | true
  _avg?: FeatureAvgAggregateInputType
  _sum?: FeatureSumAggregateInputType
  _min?: FeatureMinAggregateInputType
  _max?: FeatureMaxAggregateInputType
}

export type FeatureGroupByOutputType = {
  id: number
  name: string
  price: number | null
  imageUrl: string | null
  createdAt: Date
  updatedAt: Date
  purchaseId: number | null
  _count: FeatureCountAggregateOutputType | null
  _avg: FeatureAvgAggregateOutputType | null
  _sum: FeatureSumAggregateOutputType | null
  _min: FeatureMinAggregateOutputType | null
  _max: FeatureMaxAggregateOutputType | null
}

type GetFeatureGroupByPayload<T extends FeatureGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeatureGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FeatureGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeatureGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeatureGroupByOutputType[P]>
      }
    >
  > 



export type FeatureWhereInput = {
  AND?: Prisma.FeatureWhereInput | Prisma.FeatureWhereInput[]
  OR?: Prisma.FeatureWhereInput[]
  NOT?: Prisma.FeatureWhereInput | Prisma.FeatureWhereInput[]
  id?: Prisma.IntFilter<"Feature"> | number
  name?: Prisma.StringFilter<"Feature"> | string
  price?: Prisma.FloatNullableFilter<"Feature"> | number | null
  imageUrl?: Prisma.StringNullableFilter<"Feature"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Feature"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Feature"> | Date | string
  purchaseId?: Prisma.IntNullableFilter<"Feature"> | number | null
  products?: Prisma.ProductListRelationFilter
  purchase?: Prisma.XOR<Prisma.PurchaseNullableScalarRelationFilter, Prisma.PurchaseWhereInput> | null
}

export type FeatureOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrderInput | Prisma.SortOrder
  imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrderInput | Prisma.SortOrder
  products?: Prisma.ProductOrderByRelationAggregateInput
  purchase?: Prisma.PurchaseOrderByWithRelationInput
}

export type FeatureWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.FeatureWhereInput | Prisma.FeatureWhereInput[]
  OR?: Prisma.FeatureWhereInput[]
  NOT?: Prisma.FeatureWhereInput | Prisma.FeatureWhereInput[]
  name?: Prisma.StringFilter<"Feature"> | string
  price?: Prisma.FloatNullableFilter<"Feature"> | number | null
  imageUrl?: Prisma.StringNullableFilter<"Feature"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Feature"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Feature"> | Date | string
  purchaseId?: Prisma.IntNullableFilter<"Feature"> | number | null
  products?: Prisma.ProductListRelationFilter
  purchase?: Prisma.XOR<Prisma.PurchaseNullableScalarRelationFilter, Prisma.PurchaseWhereInput> | null
}, "id">

export type FeatureOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrderInput | Prisma.SortOrder
  imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FeatureCountOrderByAggregateInput
  _avg?: Prisma.FeatureAvgOrderByAggregateInput
  _max?: Prisma.FeatureMaxOrderByAggregateInput
  _min?: Prisma.FeatureMinOrderByAggregateInput
  _sum?: Prisma.FeatureSumOrderByAggregateInput
}

export type FeatureScalarWhereWithAggregatesInput = {
  AND?: Prisma.FeatureScalarWhereWithAggregatesInput | Prisma.FeatureScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeatureScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FeatureScalarWhereWithAggregatesInput | Prisma.FeatureScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Feature"> | number
  name?: Prisma.StringWithAggregatesFilter<"Feature"> | string
  price?: Prisma.FloatNullableWithAggregatesFilter<"Feature"> | number | null
  imageUrl?: Prisma.StringNullableWithAggregatesFilter<"Feature"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Feature"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Feature"> | Date | string
  purchaseId?: Prisma.IntNullableWithAggregatesFilter<"Feature"> | number | null
}

export type FeatureCreateInput = {
  name: string
  price?: number | null
  imageUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  products?: Prisma.ProductCreateNestedManyWithoutFeaturesInput
  purchase?: Prisma.PurchaseCreateNestedOneWithoutFeaturesInput
}

export type FeatureUncheckedCreateInput = {
  id?: number
  name: string
  price?: number | null
  imageUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  purchaseId?: number | null
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutFeaturesInput
}

export type FeatureUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  products?: Prisma.ProductUpdateManyWithoutFeaturesNestedInput
  purchase?: Prisma.PurchaseUpdateOneWithoutFeaturesNestedInput
}

export type FeatureUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  products?: Prisma.ProductUncheckedUpdateManyWithoutFeaturesNestedInput
}

export type FeatureCreateManyInput = {
  id?: number
  name: string
  price?: number | null
  imageUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  purchaseId?: number | null
}

export type FeatureUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeatureUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type FeatureListRelationFilter = {
  every?: Prisma.FeatureWhereInput
  some?: Prisma.FeatureWhereInput
  none?: Prisma.FeatureWhereInput
}

export type FeatureOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeatureCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
}

export type FeatureAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
}

export type FeatureMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
}

export type FeatureMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
}

export type FeatureSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
}

export type FeatureCreateNestedManyWithoutPurchaseInput = {
  create?: Prisma.XOR<Prisma.FeatureCreateWithoutPurchaseInput, Prisma.FeatureUncheckedCreateWithoutPurchaseInput> | Prisma.FeatureCreateWithoutPurchaseInput[] | Prisma.FeatureUncheckedCreateWithoutPurchaseInput[]
  connectOrCreate?: Prisma.FeatureCreateOrConnectWithoutPurchaseInput | Prisma.FeatureCreateOrConnectWithoutPurchaseInput[]
  createMany?: Prisma.FeatureCreateManyPurchaseInputEnvelope
  connect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
}

export type FeatureUncheckedCreateNestedManyWithoutPurchaseInput = {
  create?: Prisma.XOR<Prisma.FeatureCreateWithoutPurchaseInput, Prisma.FeatureUncheckedCreateWithoutPurchaseInput> | Prisma.FeatureCreateWithoutPurchaseInput[] | Prisma.FeatureUncheckedCreateWithoutPurchaseInput[]
  connectOrCreate?: Prisma.FeatureCreateOrConnectWithoutPurchaseInput | Prisma.FeatureCreateOrConnectWithoutPurchaseInput[]
  createMany?: Prisma.FeatureCreateManyPurchaseInputEnvelope
  connect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
}

export type FeatureUpdateManyWithoutPurchaseNestedInput = {
  create?: Prisma.XOR<Prisma.FeatureCreateWithoutPurchaseInput, Prisma.FeatureUncheckedCreateWithoutPurchaseInput> | Prisma.FeatureCreateWithoutPurchaseInput[] | Prisma.FeatureUncheckedCreateWithoutPurchaseInput[]
  connectOrCreate?: Prisma.FeatureCreateOrConnectWithoutPurchaseInput | Prisma.FeatureCreateOrConnectWithoutPurchaseInput[]
  upsert?: Prisma.FeatureUpsertWithWhereUniqueWithoutPurchaseInput | Prisma.FeatureUpsertWithWhereUniqueWithoutPurchaseInput[]
  createMany?: Prisma.FeatureCreateManyPurchaseInputEnvelope
  set?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  disconnect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  delete?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  connect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  update?: Prisma.FeatureUpdateWithWhereUniqueWithoutPurchaseInput | Prisma.FeatureUpdateWithWhereUniqueWithoutPurchaseInput[]
  updateMany?: Prisma.FeatureUpdateManyWithWhereWithoutPurchaseInput | Prisma.FeatureUpdateManyWithWhereWithoutPurchaseInput[]
  deleteMany?: Prisma.FeatureScalarWhereInput | Prisma.FeatureScalarWhereInput[]
}

export type FeatureUncheckedUpdateManyWithoutPurchaseNestedInput = {
  create?: Prisma.XOR<Prisma.FeatureCreateWithoutPurchaseInput, Prisma.FeatureUncheckedCreateWithoutPurchaseInput> | Prisma.FeatureCreateWithoutPurchaseInput[] | Prisma.FeatureUncheckedCreateWithoutPurchaseInput[]
  connectOrCreate?: Prisma.FeatureCreateOrConnectWithoutPurchaseInput | Prisma.FeatureCreateOrConnectWithoutPurchaseInput[]
  upsert?: Prisma.FeatureUpsertWithWhereUniqueWithoutPurchaseInput | Prisma.FeatureUpsertWithWhereUniqueWithoutPurchaseInput[]
  createMany?: Prisma.FeatureCreateManyPurchaseInputEnvelope
  set?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  disconnect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  delete?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  connect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  update?: Prisma.FeatureUpdateWithWhereUniqueWithoutPurchaseInput | Prisma.FeatureUpdateWithWhereUniqueWithoutPurchaseInput[]
  updateMany?: Prisma.FeatureUpdateManyWithWhereWithoutPurchaseInput | Prisma.FeatureUpdateManyWithWhereWithoutPurchaseInput[]
  deleteMany?: Prisma.FeatureScalarWhereInput | Prisma.FeatureScalarWhereInput[]
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type FeatureCreateNestedManyWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.FeatureCreateWithoutProductsInput, Prisma.FeatureUncheckedCreateWithoutProductsInput> | Prisma.FeatureCreateWithoutProductsInput[] | Prisma.FeatureUncheckedCreateWithoutProductsInput[]
  connectOrCreate?: Prisma.FeatureCreateOrConnectWithoutProductsInput | Prisma.FeatureCreateOrConnectWithoutProductsInput[]
  connect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
}

export type FeatureUncheckedCreateNestedManyWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.FeatureCreateWithoutProductsInput, Prisma.FeatureUncheckedCreateWithoutProductsInput> | Prisma.FeatureCreateWithoutProductsInput[] | Prisma.FeatureUncheckedCreateWithoutProductsInput[]
  connectOrCreate?: Prisma.FeatureCreateOrConnectWithoutProductsInput | Prisma.FeatureCreateOrConnectWithoutProductsInput[]
  connect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
}

export type FeatureUpdateManyWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.FeatureCreateWithoutProductsInput, Prisma.FeatureUncheckedCreateWithoutProductsInput> | Prisma.FeatureCreateWithoutProductsInput[] | Prisma.FeatureUncheckedCreateWithoutProductsInput[]
  connectOrCreate?: Prisma.FeatureCreateOrConnectWithoutProductsInput | Prisma.FeatureCreateOrConnectWithoutProductsInput[]
  upsert?: Prisma.FeatureUpsertWithWhereUniqueWithoutProductsInput | Prisma.FeatureUpsertWithWhereUniqueWithoutProductsInput[]
  set?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  disconnect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  delete?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  connect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  update?: Prisma.FeatureUpdateWithWhereUniqueWithoutProductsInput | Prisma.FeatureUpdateWithWhereUniqueWithoutProductsInput[]
  updateMany?: Prisma.FeatureUpdateManyWithWhereWithoutProductsInput | Prisma.FeatureUpdateManyWithWhereWithoutProductsInput[]
  deleteMany?: Prisma.FeatureScalarWhereInput | Prisma.FeatureScalarWhereInput[]
}

export type FeatureUncheckedUpdateManyWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.FeatureCreateWithoutProductsInput, Prisma.FeatureUncheckedCreateWithoutProductsInput> | Prisma.FeatureCreateWithoutProductsInput[] | Prisma.FeatureUncheckedCreateWithoutProductsInput[]
  connectOrCreate?: Prisma.FeatureCreateOrConnectWithoutProductsInput | Prisma.FeatureCreateOrConnectWithoutProductsInput[]
  upsert?: Prisma.FeatureUpsertWithWhereUniqueWithoutProductsInput | Prisma.FeatureUpsertWithWhereUniqueWithoutProductsInput[]
  set?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  disconnect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  delete?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  connect?: Prisma.FeatureWhereUniqueInput | Prisma.FeatureWhereUniqueInput[]
  update?: Prisma.FeatureUpdateWithWhereUniqueWithoutProductsInput | Prisma.FeatureUpdateWithWhereUniqueWithoutProductsInput[]
  updateMany?: Prisma.FeatureUpdateManyWithWhereWithoutProductsInput | Prisma.FeatureUpdateManyWithWhereWithoutProductsInput[]
  deleteMany?: Prisma.FeatureScalarWhereInput | Prisma.FeatureScalarWhereInput[]
}

export type FeatureCreateWithoutPurchaseInput = {
  name: string
  price?: number | null
  imageUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  products?: Prisma.ProductCreateNestedManyWithoutFeaturesInput
}

export type FeatureUncheckedCreateWithoutPurchaseInput = {
  id?: number
  name: string
  price?: number | null
  imageUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutFeaturesInput
}

export type FeatureCreateOrConnectWithoutPurchaseInput = {
  where: Prisma.FeatureWhereUniqueInput
  create: Prisma.XOR<Prisma.FeatureCreateWithoutPurchaseInput, Prisma.FeatureUncheckedCreateWithoutPurchaseInput>
}

export type FeatureCreateManyPurchaseInputEnvelope = {
  data: Prisma.FeatureCreateManyPurchaseInput | Prisma.FeatureCreateManyPurchaseInput[]
  skipDuplicates?: boolean
}

export type FeatureUpsertWithWhereUniqueWithoutPurchaseInput = {
  where: Prisma.FeatureWhereUniqueInput
  update: Prisma.XOR<Prisma.FeatureUpdateWithoutPurchaseInput, Prisma.FeatureUncheckedUpdateWithoutPurchaseInput>
  create: Prisma.XOR<Prisma.FeatureCreateWithoutPurchaseInput, Prisma.FeatureUncheckedCreateWithoutPurchaseInput>
}

export type FeatureUpdateWithWhereUniqueWithoutPurchaseInput = {
  where: Prisma.FeatureWhereUniqueInput
  data: Prisma.XOR<Prisma.FeatureUpdateWithoutPurchaseInput, Prisma.FeatureUncheckedUpdateWithoutPurchaseInput>
}

export type FeatureUpdateManyWithWhereWithoutPurchaseInput = {
  where: Prisma.FeatureScalarWhereInput
  data: Prisma.XOR<Prisma.FeatureUpdateManyMutationInput, Prisma.FeatureUncheckedUpdateManyWithoutPurchaseInput>
}

export type FeatureScalarWhereInput = {
  AND?: Prisma.FeatureScalarWhereInput | Prisma.FeatureScalarWhereInput[]
  OR?: Prisma.FeatureScalarWhereInput[]
  NOT?: Prisma.FeatureScalarWhereInput | Prisma.FeatureScalarWhereInput[]
  id?: Prisma.IntFilter<"Feature"> | number
  name?: Prisma.StringFilter<"Feature"> | string
  price?: Prisma.FloatNullableFilter<"Feature"> | number | null
  imageUrl?: Prisma.StringNullableFilter<"Feature"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Feature"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Feature"> | Date | string
  purchaseId?: Prisma.IntNullableFilter<"Feature"> | number | null
}

export type FeatureCreateWithoutProductsInput = {
  name: string
  price?: number | null
  imageUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  purchase?: Prisma.PurchaseCreateNestedOneWithoutFeaturesInput
}

export type FeatureUncheckedCreateWithoutProductsInput = {
  id?: number
  name: string
  price?: number | null
  imageUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  purchaseId?: number | null
}

export type FeatureCreateOrConnectWithoutProductsInput = {
  where: Prisma.FeatureWhereUniqueInput
  create: Prisma.XOR<Prisma.FeatureCreateWithoutProductsInput, Prisma.FeatureUncheckedCreateWithoutProductsInput>
}

export type FeatureUpsertWithWhereUniqueWithoutProductsInput = {
  where: Prisma.FeatureWhereUniqueInput
  update: Prisma.XOR<Prisma.FeatureUpdateWithoutProductsInput, Prisma.FeatureUncheckedUpdateWithoutProductsInput>
  create: Prisma.XOR<Prisma.FeatureCreateWithoutProductsInput, Prisma.FeatureUncheckedCreateWithoutProductsInput>
}

export type FeatureUpdateWithWhereUniqueWithoutProductsInput = {
  where: Prisma.FeatureWhereUniqueInput
  data: Prisma.XOR<Prisma.FeatureUpdateWithoutProductsInput, Prisma.FeatureUncheckedUpdateWithoutProductsInput>
}

export type FeatureUpdateManyWithWhereWithoutProductsInput = {
  where: Prisma.FeatureScalarWhereInput
  data: Prisma.XOR<Prisma.FeatureUpdateManyMutationInput, Prisma.FeatureUncheckedUpdateManyWithoutProductsInput>
}

export type FeatureCreateManyPurchaseInput = {
  id?: number
  name: string
  price?: number | null
  imageUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeatureUpdateWithoutPurchaseInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  products?: Prisma.ProductUpdateManyWithoutFeaturesNestedInput
}

export type FeatureUncheckedUpdateWithoutPurchaseInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  products?: Prisma.ProductUncheckedUpdateManyWithoutFeaturesNestedInput
}

export type FeatureUncheckedUpdateManyWithoutPurchaseInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeatureUpdateWithoutProductsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchase?: Prisma.PurchaseUpdateOneWithoutFeaturesNestedInput
}

export type FeatureUncheckedUpdateWithoutProductsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type FeatureUncheckedUpdateManyWithoutProductsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}


/**
 * Count Type FeatureCountOutputType
 */

export type FeatureCountOutputType = {
  products: number
}

export type FeatureCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  products?: boolean | FeatureCountOutputTypeCountProductsArgs
}

/**
 * FeatureCountOutputType without action
 */
export type FeatureCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeatureCountOutputType
   */
  select?: Prisma.FeatureCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FeatureCountOutputType without action
 */
export type FeatureCountOutputTypeCountProductsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductWhereInput
}


export type FeatureSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  imageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  purchaseId?: boolean
  products?: boolean | Prisma.Feature$productsArgs<ExtArgs>
  purchase?: boolean | Prisma.Feature$purchaseArgs<ExtArgs>
  _count?: boolean | Prisma.FeatureCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feature"]>

export type FeatureSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  imageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  purchaseId?: boolean
  purchase?: boolean | Prisma.Feature$purchaseArgs<ExtArgs>
}, ExtArgs["result"]["feature"]>

export type FeatureSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  imageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  purchaseId?: boolean
  purchase?: boolean | Prisma.Feature$purchaseArgs<ExtArgs>
}, ExtArgs["result"]["feature"]>

export type FeatureSelectScalar = {
  id?: boolean
  name?: boolean
  price?: boolean
  imageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  purchaseId?: boolean
}

export type FeatureOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "price" | "imageUrl" | "createdAt" | "updatedAt" | "purchaseId", ExtArgs["result"]["feature"]>
export type FeatureInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  products?: boolean | Prisma.Feature$productsArgs<ExtArgs>
  purchase?: boolean | Prisma.Feature$purchaseArgs<ExtArgs>
  _count?: boolean | Prisma.FeatureCountOutputTypeDefaultArgs<ExtArgs>
}
export type FeatureIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  purchase?: boolean | Prisma.Feature$purchaseArgs<ExtArgs>
}
export type FeatureIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  purchase?: boolean | Prisma.Feature$purchaseArgs<ExtArgs>
}

export type $FeaturePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Feature"
  objects: {
    products: Prisma.$ProductPayload<ExtArgs>[]
    purchase: Prisma.$PurchasePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    price: number | null
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    purchaseId: number | null
  }, ExtArgs["result"]["feature"]>
  composites: {}
}

export type FeatureGetPayload<S extends boolean | null | undefined | FeatureDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FeaturePayload, S>

export type FeatureCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FeatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FeatureCountAggregateInputType | true
  }

export interface FeatureDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feature'], meta: { name: 'Feature' } }
  /**
   * Find zero or one Feature that matches the filter.
   * @param {FeatureFindUniqueArgs} args - Arguments to find a Feature
   * @example
   * // Get one Feature
   * const feature = await prisma.feature.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeatureFindUniqueArgs>(args: Prisma.SelectSubset<T, FeatureFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FeatureClient<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Feature that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeatureFindUniqueOrThrowArgs} args - Arguments to find a Feature
   * @example
   * // Get one Feature
   * const feature = await prisma.feature.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeatureFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FeatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeatureClient<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Feature that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeatureFindFirstArgs} args - Arguments to find a Feature
   * @example
   * // Get one Feature
   * const feature = await prisma.feature.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeatureFindFirstArgs>(args?: Prisma.SelectSubset<T, FeatureFindFirstArgs<ExtArgs>>): Prisma.Prisma__FeatureClient<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Feature that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeatureFindFirstOrThrowArgs} args - Arguments to find a Feature
   * @example
   * // Get one Feature
   * const feature = await prisma.feature.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeatureFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FeatureFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeatureClient<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Features that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeatureFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Features
   * const features = await prisma.feature.findMany()
   * 
   * // Get first 10 Features
   * const features = await prisma.feature.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const featureWithIdOnly = await prisma.feature.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FeatureFindManyArgs>(args?: Prisma.SelectSubset<T, FeatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Feature.
   * @param {FeatureCreateArgs} args - Arguments to create a Feature.
   * @example
   * // Create one Feature
   * const Feature = await prisma.feature.create({
   *   data: {
   *     // ... data to create a Feature
   *   }
   * })
   * 
   */
  create<T extends FeatureCreateArgs>(args: Prisma.SelectSubset<T, FeatureCreateArgs<ExtArgs>>): Prisma.Prisma__FeatureClient<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Features.
   * @param {FeatureCreateManyArgs} args - Arguments to create many Features.
   * @example
   * // Create many Features
   * const feature = await prisma.feature.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FeatureCreateManyArgs>(args?: Prisma.SelectSubset<T, FeatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Features and returns the data saved in the database.
   * @param {FeatureCreateManyAndReturnArgs} args - Arguments to create many Features.
   * @example
   * // Create many Features
   * const feature = await prisma.feature.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Features and only return the `id`
   * const featureWithIdOnly = await prisma.feature.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FeatureCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FeatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Feature.
   * @param {FeatureDeleteArgs} args - Arguments to delete one Feature.
   * @example
   * // Delete one Feature
   * const Feature = await prisma.feature.delete({
   *   where: {
   *     // ... filter to delete one Feature
   *   }
   * })
   * 
   */
  delete<T extends FeatureDeleteArgs>(args: Prisma.SelectSubset<T, FeatureDeleteArgs<ExtArgs>>): Prisma.Prisma__FeatureClient<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Feature.
   * @param {FeatureUpdateArgs} args - Arguments to update one Feature.
   * @example
   * // Update one Feature
   * const feature = await prisma.feature.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FeatureUpdateArgs>(args: Prisma.SelectSubset<T, FeatureUpdateArgs<ExtArgs>>): Prisma.Prisma__FeatureClient<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Features.
   * @param {FeatureDeleteManyArgs} args - Arguments to filter Features to delete.
   * @example
   * // Delete a few Features
   * const { count } = await prisma.feature.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FeatureDeleteManyArgs>(args?: Prisma.SelectSubset<T, FeatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Features.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeatureUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Features
   * const feature = await prisma.feature.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FeatureUpdateManyArgs>(args: Prisma.SelectSubset<T, FeatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Features and returns the data updated in the database.
   * @param {FeatureUpdateManyAndReturnArgs} args - Arguments to update many Features.
   * @example
   * // Update many Features
   * const feature = await prisma.feature.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Features and only return the `id`
   * const featureWithIdOnly = await prisma.feature.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FeatureUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FeatureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Feature.
   * @param {FeatureUpsertArgs} args - Arguments to update or create a Feature.
   * @example
   * // Update or create a Feature
   * const feature = await prisma.feature.upsert({
   *   create: {
   *     // ... data to create a Feature
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Feature we want to update
   *   }
   * })
   */
  upsert<T extends FeatureUpsertArgs>(args: Prisma.SelectSubset<T, FeatureUpsertArgs<ExtArgs>>): Prisma.Prisma__FeatureClient<runtime.Types.Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Features.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeatureCountArgs} args - Arguments to filter Features to count.
   * @example
   * // Count the number of Features
   * const count = await prisma.feature.count({
   *   where: {
   *     // ... the filter for the Features we want to count
   *   }
   * })
  **/
  count<T extends FeatureCountArgs>(
    args?: Prisma.Subset<T, FeatureCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FeatureCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Feature.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FeatureAggregateArgs>(args: Prisma.Subset<T, FeatureAggregateArgs>): Prisma.PrismaPromise<GetFeatureAggregateType<T>>

  /**
   * Group by Feature.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeatureGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FeatureGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeatureGroupByArgs['orderBy'] }
      : { orderBy?: FeatureGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FeatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Feature model
 */
readonly fields: FeatureFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Feature.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeatureClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  products<T extends Prisma.Feature$productsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Feature$productsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  purchase<T extends Prisma.Feature$purchaseArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Feature$purchaseArgs<ExtArgs>>): Prisma.Prisma__PurchaseClient<runtime.Types.Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Feature model
 */
export interface FeatureFieldRefs {
  readonly id: Prisma.FieldRef<"Feature", 'Int'>
  readonly name: Prisma.FieldRef<"Feature", 'String'>
  readonly price: Prisma.FieldRef<"Feature", 'Float'>
  readonly imageUrl: Prisma.FieldRef<"Feature", 'String'>
  readonly createdAt: Prisma.FieldRef<"Feature", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Feature", 'DateTime'>
  readonly purchaseId: Prisma.FieldRef<"Feature", 'Int'>
}
    

// Custom InputTypes
/**
 * Feature findUnique
 */
export type FeatureFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * Filter, which Feature to fetch.
   */
  where: Prisma.FeatureWhereUniqueInput
}

/**
 * Feature findUniqueOrThrow
 */
export type FeatureFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * Filter, which Feature to fetch.
   */
  where: Prisma.FeatureWhereUniqueInput
}

/**
 * Feature findFirst
 */
export type FeatureFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * Filter, which Feature to fetch.
   */
  where?: Prisma.FeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Features to fetch.
   */
  orderBy?: Prisma.FeatureOrderByWithRelationInput | Prisma.FeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Features.
   */
  cursor?: Prisma.FeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Features from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Features.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Features.
   */
  distinct?: Prisma.FeatureScalarFieldEnum | Prisma.FeatureScalarFieldEnum[]
}

/**
 * Feature findFirstOrThrow
 */
export type FeatureFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * Filter, which Feature to fetch.
   */
  where?: Prisma.FeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Features to fetch.
   */
  orderBy?: Prisma.FeatureOrderByWithRelationInput | Prisma.FeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Features.
   */
  cursor?: Prisma.FeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Features from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Features.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Features.
   */
  distinct?: Prisma.FeatureScalarFieldEnum | Prisma.FeatureScalarFieldEnum[]
}

/**
 * Feature findMany
 */
export type FeatureFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * Filter, which Features to fetch.
   */
  where?: Prisma.FeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Features to fetch.
   */
  orderBy?: Prisma.FeatureOrderByWithRelationInput | Prisma.FeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Features.
   */
  cursor?: Prisma.FeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Features from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Features.
   */
  skip?: number
  distinct?: Prisma.FeatureScalarFieldEnum | Prisma.FeatureScalarFieldEnum[]
}

/**
 * Feature create
 */
export type FeatureCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * The data needed to create a Feature.
   */
  data: Prisma.XOR<Prisma.FeatureCreateInput, Prisma.FeatureUncheckedCreateInput>
}

/**
 * Feature createMany
 */
export type FeatureCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Features.
   */
  data: Prisma.FeatureCreateManyInput | Prisma.FeatureCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Feature createManyAndReturn
 */
export type FeatureCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * The data used to create many Features.
   */
  data: Prisma.FeatureCreateManyInput | Prisma.FeatureCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Feature update
 */
export type FeatureUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * The data needed to update a Feature.
   */
  data: Prisma.XOR<Prisma.FeatureUpdateInput, Prisma.FeatureUncheckedUpdateInput>
  /**
   * Choose, which Feature to update.
   */
  where: Prisma.FeatureWhereUniqueInput
}

/**
 * Feature updateMany
 */
export type FeatureUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Features.
   */
  data: Prisma.XOR<Prisma.FeatureUpdateManyMutationInput, Prisma.FeatureUncheckedUpdateManyInput>
  /**
   * Filter which Features to update
   */
  where?: Prisma.FeatureWhereInput
  /**
   * Limit how many Features to update.
   */
  limit?: number
}

/**
 * Feature updateManyAndReturn
 */
export type FeatureUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * The data used to update Features.
   */
  data: Prisma.XOR<Prisma.FeatureUpdateManyMutationInput, Prisma.FeatureUncheckedUpdateManyInput>
  /**
   * Filter which Features to update
   */
  where?: Prisma.FeatureWhereInput
  /**
   * Limit how many Features to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Feature upsert
 */
export type FeatureUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * The filter to search for the Feature to update in case it exists.
   */
  where: Prisma.FeatureWhereUniqueInput
  /**
   * In case the Feature found by the `where` argument doesn't exist, create a new Feature with this data.
   */
  create: Prisma.XOR<Prisma.FeatureCreateInput, Prisma.FeatureUncheckedCreateInput>
  /**
   * In case the Feature was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeatureUpdateInput, Prisma.FeatureUncheckedUpdateInput>
}

/**
 * Feature delete
 */
export type FeatureDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
  /**
   * Filter which Feature to delete.
   */
  where: Prisma.FeatureWhereUniqueInput
}

/**
 * Feature deleteMany
 */
export type FeatureDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Features to delete
   */
  where?: Prisma.FeatureWhereInput
  /**
   * Limit how many Features to delete.
   */
  limit?: number
}

/**
 * Feature.products
 */
export type Feature$productsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Product
   */
  select?: Prisma.ProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Product
   */
  omit?: Prisma.ProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInclude<ExtArgs> | null
  where?: Prisma.ProductWhereInput
  orderBy?: Prisma.ProductOrderByWithRelationInput | Prisma.ProductOrderByWithRelationInput[]
  cursor?: Prisma.ProductWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductScalarFieldEnum | Prisma.ProductScalarFieldEnum[]
}

/**
 * Feature.purchase
 */
export type Feature$purchaseArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Purchase
   */
  select?: Prisma.PurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Purchase
   */
  omit?: Prisma.PurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseInclude<ExtArgs> | null
  where?: Prisma.PurchaseWhereInput
}

/**
 * Feature without action
 */
export type FeatureDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feature
   */
  select?: Prisma.FeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feature
   */
  omit?: Prisma.FeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeatureInclude<ExtArgs> | null
}

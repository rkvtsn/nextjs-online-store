
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Cart` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Cart
 * 
 */
export type CartModel = runtime.Types.Result.DefaultSelection<Prisma.$CartPayload>

export type AggregateCart = {
  _count: CartCountAggregateOutputType | null
  _avg: CartAvgAggregateOutputType | null
  _sum: CartSumAggregateOutputType | null
  _min: CartMinAggregateOutputType | null
  _max: CartMaxAggregateOutputType | null
}

export type CartAvgAggregateOutputType = {
  totalAmount: number | null
}

export type CartSumAggregateOutputType = {
  totalAmount: number | null
}

export type CartMinAggregateOutputType = {
  id: string | null
  userId: string | null
  totalAmount: number | null
  sessionId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CartMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  totalAmount: number | null
  sessionId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CartCountAggregateOutputType = {
  id: number
  userId: number
  totalAmount: number
  sessionId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CartAvgAggregateInputType = {
  totalAmount?: true
}

export type CartSumAggregateInputType = {
  totalAmount?: true
}

export type CartMinAggregateInputType = {
  id?: true
  userId?: true
  totalAmount?: true
  sessionId?: true
  createdAt?: true
  updatedAt?: true
}

export type CartMaxAggregateInputType = {
  id?: true
  userId?: true
  totalAmount?: true
  sessionId?: true
  createdAt?: true
  updatedAt?: true
}

export type CartCountAggregateInputType = {
  id?: true
  userId?: true
  totalAmount?: true
  sessionId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CartAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Cart to aggregate.
   */
  where?: Prisma.CartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Carts to fetch.
   */
  orderBy?: Prisma.CartOrderByWithRelationInput | Prisma.CartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Carts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Carts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Carts
  **/
  _count?: true | CartCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CartAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CartSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CartMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CartMaxAggregateInputType
}

export type GetCartAggregateType<T extends CartAggregateArgs> = {
      [P in keyof T & keyof AggregateCart]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCart[P]>
    : Prisma.GetScalarType<T[P], AggregateCart[P]>
}




export type CartGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CartWhereInput
  orderBy?: Prisma.CartOrderByWithAggregationInput | Prisma.CartOrderByWithAggregationInput[]
  by: Prisma.CartScalarFieldEnum[] | Prisma.CartScalarFieldEnum
  having?: Prisma.CartScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CartCountAggregateInputType | true
  _avg?: CartAvgAggregateInputType
  _sum?: CartSumAggregateInputType
  _min?: CartMinAggregateInputType
  _max?: CartMaxAggregateInputType
}

export type CartGroupByOutputType = {
  id: string
  userId: string | null
  totalAmount: number
  sessionId: string
  createdAt: Date
  updatedAt: Date
  _count: CartCountAggregateOutputType | null
  _avg: CartAvgAggregateOutputType | null
  _sum: CartSumAggregateOutputType | null
  _min: CartMinAggregateOutputType | null
  _max: CartMaxAggregateOutputType | null
}

type GetCartGroupByPayload<T extends CartGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CartGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CartGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CartGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CartGroupByOutputType[P]>
      }
    >
  > 



export type CartWhereInput = {
  AND?: Prisma.CartWhereInput | Prisma.CartWhereInput[]
  OR?: Prisma.CartWhereInput[]
  NOT?: Prisma.CartWhereInput | Prisma.CartWhereInput[]
  id?: Prisma.StringFilter<"Cart"> | string
  userId?: Prisma.StringNullableFilter<"Cart"> | string | null
  totalAmount?: Prisma.FloatFilter<"Cart"> | number
  sessionId?: Prisma.StringFilter<"Cart"> | string
  createdAt?: Prisma.DateTimeFilter<"Cart"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Cart"> | Date | string
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  purchases?: Prisma.PurchaseListRelationFilter
}

export type CartOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  purchases?: Prisma.PurchaseOrderByRelationAggregateInput
}

export type CartWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.CartWhereInput | Prisma.CartWhereInput[]
  OR?: Prisma.CartWhereInput[]
  NOT?: Prisma.CartWhereInput | Prisma.CartWhereInput[]
  totalAmount?: Prisma.FloatFilter<"Cart"> | number
  sessionId?: Prisma.StringFilter<"Cart"> | string
  createdAt?: Prisma.DateTimeFilter<"Cart"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Cart"> | Date | string
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  purchases?: Prisma.PurchaseListRelationFilter
}, "id" | "userId">

export type CartOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CartCountOrderByAggregateInput
  _avg?: Prisma.CartAvgOrderByAggregateInput
  _max?: Prisma.CartMaxOrderByAggregateInput
  _min?: Prisma.CartMinOrderByAggregateInput
  _sum?: Prisma.CartSumOrderByAggregateInput
}

export type CartScalarWhereWithAggregatesInput = {
  AND?: Prisma.CartScalarWhereWithAggregatesInput | Prisma.CartScalarWhereWithAggregatesInput[]
  OR?: Prisma.CartScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CartScalarWhereWithAggregatesInput | Prisma.CartScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Cart"> | string
  userId?: Prisma.StringNullableWithAggregatesFilter<"Cart"> | string | null
  totalAmount?: Prisma.FloatWithAggregatesFilter<"Cart"> | number
  sessionId?: Prisma.StringWithAggregatesFilter<"Cart"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Cart"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Cart"> | Date | string
}

export type CartCreateInput = {
  id?: string
  totalAmount?: number
  sessionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutCartInput
  purchases?: Prisma.PurchaseCreateNestedManyWithoutCartInput
}

export type CartUncheckedCreateInput = {
  id?: string
  userId?: string | null
  totalAmount?: number
  sessionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  purchases?: Prisma.PurchaseUncheckedCreateNestedManyWithoutCartInput
}

export type CartUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutCartNestedInput
  purchases?: Prisma.PurchaseUpdateManyWithoutCartNestedInput
}

export type CartUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchases?: Prisma.PurchaseUncheckedUpdateManyWithoutCartNestedInput
}

export type CartCreateManyInput = {
  id?: string
  userId?: string | null
  totalAmount?: number
  sessionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CartUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CartUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CartNullableScalarRelationFilter = {
  is?: Prisma.CartWhereInput | null
  isNot?: Prisma.CartWhereInput | null
}

export type CartCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CartAvgOrderByAggregateInput = {
  totalAmount?: Prisma.SortOrder
}

export type CartMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CartMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CartSumOrderByAggregateInput = {
  totalAmount?: Prisma.SortOrder
}

export type CartScalarRelationFilter = {
  is?: Prisma.CartWhereInput
  isNot?: Prisma.CartWhereInput
}

export type CartCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CartCreateWithoutUserInput, Prisma.CartUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CartCreateOrConnectWithoutUserInput
  connect?: Prisma.CartWhereUniqueInput
}

export type CartUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CartCreateWithoutUserInput, Prisma.CartUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CartCreateOrConnectWithoutUserInput
  connect?: Prisma.CartWhereUniqueInput
}

export type CartUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CartCreateWithoutUserInput, Prisma.CartUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CartCreateOrConnectWithoutUserInput
  upsert?: Prisma.CartUpsertWithoutUserInput
  disconnect?: Prisma.CartWhereInput | boolean
  delete?: Prisma.CartWhereInput | boolean
  connect?: Prisma.CartWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CartUpdateToOneWithWhereWithoutUserInput, Prisma.CartUpdateWithoutUserInput>, Prisma.CartUncheckedUpdateWithoutUserInput>
}

export type CartUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CartCreateWithoutUserInput, Prisma.CartUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CartCreateOrConnectWithoutUserInput
  upsert?: Prisma.CartUpsertWithoutUserInput
  disconnect?: Prisma.CartWhereInput | boolean
  delete?: Prisma.CartWhereInput | boolean
  connect?: Prisma.CartWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CartUpdateToOneWithWhereWithoutUserInput, Prisma.CartUpdateWithoutUserInput>, Prisma.CartUncheckedUpdateWithoutUserInput>
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type CartCreateNestedOneWithoutPurchasesInput = {
  create?: Prisma.XOR<Prisma.CartCreateWithoutPurchasesInput, Prisma.CartUncheckedCreateWithoutPurchasesInput>
  connectOrCreate?: Prisma.CartCreateOrConnectWithoutPurchasesInput
  connect?: Prisma.CartWhereUniqueInput
}

export type CartUpdateOneRequiredWithoutPurchasesNestedInput = {
  create?: Prisma.XOR<Prisma.CartCreateWithoutPurchasesInput, Prisma.CartUncheckedCreateWithoutPurchasesInput>
  connectOrCreate?: Prisma.CartCreateOrConnectWithoutPurchasesInput
  upsert?: Prisma.CartUpsertWithoutPurchasesInput
  connect?: Prisma.CartWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CartUpdateToOneWithWhereWithoutPurchasesInput, Prisma.CartUpdateWithoutPurchasesInput>, Prisma.CartUncheckedUpdateWithoutPurchasesInput>
}

export type CartCreateWithoutUserInput = {
  id?: string
  totalAmount?: number
  sessionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  purchases?: Prisma.PurchaseCreateNestedManyWithoutCartInput
}

export type CartUncheckedCreateWithoutUserInput = {
  id?: string
  totalAmount?: number
  sessionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  purchases?: Prisma.PurchaseUncheckedCreateNestedManyWithoutCartInput
}

export type CartCreateOrConnectWithoutUserInput = {
  where: Prisma.CartWhereUniqueInput
  create: Prisma.XOR<Prisma.CartCreateWithoutUserInput, Prisma.CartUncheckedCreateWithoutUserInput>
}

export type CartUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.CartUpdateWithoutUserInput, Prisma.CartUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CartCreateWithoutUserInput, Prisma.CartUncheckedCreateWithoutUserInput>
  where?: Prisma.CartWhereInput
}

export type CartUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.CartWhereInput
  data: Prisma.XOR<Prisma.CartUpdateWithoutUserInput, Prisma.CartUncheckedUpdateWithoutUserInput>
}

export type CartUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchases?: Prisma.PurchaseUpdateManyWithoutCartNestedInput
}

export type CartUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchases?: Prisma.PurchaseUncheckedUpdateManyWithoutCartNestedInput
}

export type CartCreateWithoutPurchasesInput = {
  id?: string
  totalAmount?: number
  sessionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutCartInput
}

export type CartUncheckedCreateWithoutPurchasesInput = {
  id?: string
  userId?: string | null
  totalAmount?: number
  sessionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CartCreateOrConnectWithoutPurchasesInput = {
  where: Prisma.CartWhereUniqueInput
  create: Prisma.XOR<Prisma.CartCreateWithoutPurchasesInput, Prisma.CartUncheckedCreateWithoutPurchasesInput>
}

export type CartUpsertWithoutPurchasesInput = {
  update: Prisma.XOR<Prisma.CartUpdateWithoutPurchasesInput, Prisma.CartUncheckedUpdateWithoutPurchasesInput>
  create: Prisma.XOR<Prisma.CartCreateWithoutPurchasesInput, Prisma.CartUncheckedCreateWithoutPurchasesInput>
  where?: Prisma.CartWhereInput
}

export type CartUpdateToOneWithWhereWithoutPurchasesInput = {
  where?: Prisma.CartWhereInput
  data: Prisma.XOR<Prisma.CartUpdateWithoutPurchasesInput, Prisma.CartUncheckedUpdateWithoutPurchasesInput>
}

export type CartUpdateWithoutPurchasesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutCartNestedInput
}

export type CartUncheckedUpdateWithoutPurchasesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type CartCountOutputType
 */

export type CartCountOutputType = {
  purchases: number
}

export type CartCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  purchases?: boolean | CartCountOutputTypeCountPurchasesArgs
}

/**
 * CartCountOutputType without action
 */
export type CartCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CartCountOutputType
   */
  select?: Prisma.CartCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CartCountOutputType without action
 */
export type CartCountOutputTypeCountPurchasesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PurchaseWhereInput
}


export type CartSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  totalAmount?: boolean
  sessionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.Cart$userArgs<ExtArgs>
  purchases?: boolean | Prisma.Cart$purchasesArgs<ExtArgs>
  _count?: boolean | Prisma.CartCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cart"]>

export type CartSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  totalAmount?: boolean
  sessionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.Cart$userArgs<ExtArgs>
}, ExtArgs["result"]["cart"]>

export type CartSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  totalAmount?: boolean
  sessionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.Cart$userArgs<ExtArgs>
}, ExtArgs["result"]["cart"]>

export type CartSelectScalar = {
  id?: boolean
  userId?: boolean
  totalAmount?: boolean
  sessionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CartOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "totalAmount" | "sessionId" | "createdAt" | "updatedAt", ExtArgs["result"]["cart"]>
export type CartInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Cart$userArgs<ExtArgs>
  purchases?: boolean | Prisma.Cart$purchasesArgs<ExtArgs>
  _count?: boolean | Prisma.CartCountOutputTypeDefaultArgs<ExtArgs>
}
export type CartIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Cart$userArgs<ExtArgs>
}
export type CartIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Cart$userArgs<ExtArgs>
}

export type $CartPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Cart"
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null
    purchases: Prisma.$PurchasePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string | null
    totalAmount: number
    sessionId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["cart"]>
  composites: {}
}

export type CartGetPayload<S extends boolean | null | undefined | CartDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CartPayload, S>

export type CartCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CartCountAggregateInputType | true
  }

export interface CartDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cart'], meta: { name: 'Cart' } }
  /**
   * Find zero or one Cart that matches the filter.
   * @param {CartFindUniqueArgs} args - Arguments to find a Cart
   * @example
   * // Get one Cart
   * const cart = await prisma.cart.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CartFindUniqueArgs>(args: Prisma.SelectSubset<T, CartFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CartClient<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Cart that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CartFindUniqueOrThrowArgs} args - Arguments to find a Cart
   * @example
   * // Get one Cart
   * const cart = await prisma.cart.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CartFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CartFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CartClient<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cart that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CartFindFirstArgs} args - Arguments to find a Cart
   * @example
   * // Get one Cart
   * const cart = await prisma.cart.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CartFindFirstArgs>(args?: Prisma.SelectSubset<T, CartFindFirstArgs<ExtArgs>>): Prisma.Prisma__CartClient<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cart that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CartFindFirstOrThrowArgs} args - Arguments to find a Cart
   * @example
   * // Get one Cart
   * const cart = await prisma.cart.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CartFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CartFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CartClient<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Carts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CartFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Carts
   * const carts = await prisma.cart.findMany()
   * 
   * // Get first 10 Carts
   * const carts = await prisma.cart.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const cartWithIdOnly = await prisma.cart.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CartFindManyArgs>(args?: Prisma.SelectSubset<T, CartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Cart.
   * @param {CartCreateArgs} args - Arguments to create a Cart.
   * @example
   * // Create one Cart
   * const Cart = await prisma.cart.create({
   *   data: {
   *     // ... data to create a Cart
   *   }
   * })
   * 
   */
  create<T extends CartCreateArgs>(args: Prisma.SelectSubset<T, CartCreateArgs<ExtArgs>>): Prisma.Prisma__CartClient<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Carts.
   * @param {CartCreateManyArgs} args - Arguments to create many Carts.
   * @example
   * // Create many Carts
   * const cart = await prisma.cart.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CartCreateManyArgs>(args?: Prisma.SelectSubset<T, CartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Carts and returns the data saved in the database.
   * @param {CartCreateManyAndReturnArgs} args - Arguments to create many Carts.
   * @example
   * // Create many Carts
   * const cart = await prisma.cart.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Carts and only return the `id`
   * const cartWithIdOnly = await prisma.cart.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CartCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Cart.
   * @param {CartDeleteArgs} args - Arguments to delete one Cart.
   * @example
   * // Delete one Cart
   * const Cart = await prisma.cart.delete({
   *   where: {
   *     // ... filter to delete one Cart
   *   }
   * })
   * 
   */
  delete<T extends CartDeleteArgs>(args: Prisma.SelectSubset<T, CartDeleteArgs<ExtArgs>>): Prisma.Prisma__CartClient<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Cart.
   * @param {CartUpdateArgs} args - Arguments to update one Cart.
   * @example
   * // Update one Cart
   * const cart = await prisma.cart.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CartUpdateArgs>(args: Prisma.SelectSubset<T, CartUpdateArgs<ExtArgs>>): Prisma.Prisma__CartClient<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Carts.
   * @param {CartDeleteManyArgs} args - Arguments to filter Carts to delete.
   * @example
   * // Delete a few Carts
   * const { count } = await prisma.cart.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CartDeleteManyArgs>(args?: Prisma.SelectSubset<T, CartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Carts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CartUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Carts
   * const cart = await prisma.cart.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CartUpdateManyArgs>(args: Prisma.SelectSubset<T, CartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Carts and returns the data updated in the database.
   * @param {CartUpdateManyAndReturnArgs} args - Arguments to update many Carts.
   * @example
   * // Update many Carts
   * const cart = await prisma.cart.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Carts and only return the `id`
   * const cartWithIdOnly = await prisma.cart.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CartUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Cart.
   * @param {CartUpsertArgs} args - Arguments to update or create a Cart.
   * @example
   * // Update or create a Cart
   * const cart = await prisma.cart.upsert({
   *   create: {
   *     // ... data to create a Cart
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Cart we want to update
   *   }
   * })
   */
  upsert<T extends CartUpsertArgs>(args: Prisma.SelectSubset<T, CartUpsertArgs<ExtArgs>>): Prisma.Prisma__CartClient<runtime.Types.Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Carts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CartCountArgs} args - Arguments to filter Carts to count.
   * @example
   * // Count the number of Carts
   * const count = await prisma.cart.count({
   *   where: {
   *     // ... the filter for the Carts we want to count
   *   }
   * })
  **/
  count<T extends CartCountArgs>(
    args?: Prisma.Subset<T, CartCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CartCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Cart.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CartAggregateArgs>(args: Prisma.Subset<T, CartAggregateArgs>): Prisma.PrismaPromise<GetCartAggregateType<T>>

  /**
   * Group by Cart.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CartGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CartGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CartGroupByArgs['orderBy'] }
      : { orderBy?: CartGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Cart model
 */
readonly fields: CartFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Cart.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CartClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.Cart$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Cart$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  purchases<T extends Prisma.Cart$purchasesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Cart$purchasesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Cart model
 */
export interface CartFieldRefs {
  readonly id: Prisma.FieldRef<"Cart", 'String'>
  readonly userId: Prisma.FieldRef<"Cart", 'String'>
  readonly totalAmount: Prisma.FieldRef<"Cart", 'Float'>
  readonly sessionId: Prisma.FieldRef<"Cart", 'String'>
  readonly createdAt: Prisma.FieldRef<"Cart", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Cart", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Cart findUnique
 */
export type CartFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * Filter, which Cart to fetch.
   */
  where: Prisma.CartWhereUniqueInput
}

/**
 * Cart findUniqueOrThrow
 */
export type CartFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * Filter, which Cart to fetch.
   */
  where: Prisma.CartWhereUniqueInput
}

/**
 * Cart findFirst
 */
export type CartFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * Filter, which Cart to fetch.
   */
  where?: Prisma.CartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Carts to fetch.
   */
  orderBy?: Prisma.CartOrderByWithRelationInput | Prisma.CartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Carts.
   */
  cursor?: Prisma.CartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Carts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Carts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Carts.
   */
  distinct?: Prisma.CartScalarFieldEnum | Prisma.CartScalarFieldEnum[]
}

/**
 * Cart findFirstOrThrow
 */
export type CartFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * Filter, which Cart to fetch.
   */
  where?: Prisma.CartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Carts to fetch.
   */
  orderBy?: Prisma.CartOrderByWithRelationInput | Prisma.CartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Carts.
   */
  cursor?: Prisma.CartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Carts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Carts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Carts.
   */
  distinct?: Prisma.CartScalarFieldEnum | Prisma.CartScalarFieldEnum[]
}

/**
 * Cart findMany
 */
export type CartFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * Filter, which Carts to fetch.
   */
  where?: Prisma.CartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Carts to fetch.
   */
  orderBy?: Prisma.CartOrderByWithRelationInput | Prisma.CartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Carts.
   */
  cursor?: Prisma.CartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Carts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Carts.
   */
  skip?: number
  distinct?: Prisma.CartScalarFieldEnum | Prisma.CartScalarFieldEnum[]
}

/**
 * Cart create
 */
export type CartCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * The data needed to create a Cart.
   */
  data: Prisma.XOR<Prisma.CartCreateInput, Prisma.CartUncheckedCreateInput>
}

/**
 * Cart createMany
 */
export type CartCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Carts.
   */
  data: Prisma.CartCreateManyInput | Prisma.CartCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Cart createManyAndReturn
 */
export type CartCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * The data used to create many Carts.
   */
  data: Prisma.CartCreateManyInput | Prisma.CartCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Cart update
 */
export type CartUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * The data needed to update a Cart.
   */
  data: Prisma.XOR<Prisma.CartUpdateInput, Prisma.CartUncheckedUpdateInput>
  /**
   * Choose, which Cart to update.
   */
  where: Prisma.CartWhereUniqueInput
}

/**
 * Cart updateMany
 */
export type CartUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Carts.
   */
  data: Prisma.XOR<Prisma.CartUpdateManyMutationInput, Prisma.CartUncheckedUpdateManyInput>
  /**
   * Filter which Carts to update
   */
  where?: Prisma.CartWhereInput
  /**
   * Limit how many Carts to update.
   */
  limit?: number
}

/**
 * Cart updateManyAndReturn
 */
export type CartUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * The data used to update Carts.
   */
  data: Prisma.XOR<Prisma.CartUpdateManyMutationInput, Prisma.CartUncheckedUpdateManyInput>
  /**
   * Filter which Carts to update
   */
  where?: Prisma.CartWhereInput
  /**
   * Limit how many Carts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Cart upsert
 */
export type CartUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * The filter to search for the Cart to update in case it exists.
   */
  where: Prisma.CartWhereUniqueInput
  /**
   * In case the Cart found by the `where` argument doesn't exist, create a new Cart with this data.
   */
  create: Prisma.XOR<Prisma.CartCreateInput, Prisma.CartUncheckedCreateInput>
  /**
   * In case the Cart was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CartUpdateInput, Prisma.CartUncheckedUpdateInput>
}

/**
 * Cart delete
 */
export type CartDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
  /**
   * Filter which Cart to delete.
   */
  where: Prisma.CartWhereUniqueInput
}

/**
 * Cart deleteMany
 */
export type CartDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Carts to delete
   */
  where?: Prisma.CartWhereInput
  /**
   * Limit how many Carts to delete.
   */
  limit?: number
}

/**
 * Cart.user
 */
export type Cart$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Cart.purchases
 */
export type Cart$purchasesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Purchase
   */
  select?: Prisma.PurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Purchase
   */
  omit?: Prisma.PurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseInclude<ExtArgs> | null
  where?: Prisma.PurchaseWhereInput
  orderBy?: Prisma.PurchaseOrderByWithRelationInput | Prisma.PurchaseOrderByWithRelationInput[]
  cursor?: Prisma.PurchaseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PurchaseScalarFieldEnum | Prisma.PurchaseScalarFieldEnum[]
}

/**
 * Cart without action
 */
export type CartDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart
   */
  select?: Prisma.CartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cart
   */
  omit?: Prisma.CartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartInclude<ExtArgs> | null
}
